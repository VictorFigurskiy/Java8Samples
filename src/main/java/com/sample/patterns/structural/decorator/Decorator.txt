Шаблон Декоратор (Decorator)
==========================================================
Цель:

Динамическое добавление новых обязанностей объекту.

==========================================================

Используется в качестве альтернптивы порождению подклассов для расширения фуункциональности.

(Паттерн Декоратор – шаблон проектирования, предназначенный для динамического подключения к
объекту дополнительного поведения. Паттерн Декоратор представляет гибкую альтернативу практике создания подклассов
с целью расширения функциональности.)

==========================================================
Пример использования:

- динамическое и понятное клиентам добавление обязанностей обьектам;
- реализация обязанностей, которые могут быть сняты с объекта;
- расширение класса путем порождения подклассов невозможно по каким-либо причинам.

==========================================================


Пример с декоратор по авто - https://javanerd.ru/%D0%BF%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D1%8B-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/%D0%BF%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD-%D0%B4%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80/

"Классы должны быть открыты для расширения, но закрыты для изменений"

Как Вы могли заметить Паттерн Декоратор достаточно прост в реализации и обладает рядом плюсов, в качестве основного
плюса, я хотел бы отметить возможность динамически подключать новую функциональность объектам.
Благодаря этому Java широко использует этот паттерн в классах ввода/вывода.